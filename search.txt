SEQUENTIAL SEARCH
public class SequentialSearch {
    public static boolean contains(int[] a, int b){
        for (int i : a) {
            if (i==b){
                return true;
            }
        }
        return false;
    }
}

TEST
public class SequentialSearchTest {

    @Test
    public void testContains() {
        int[]a = {1, 2, 3, 4, 5, 19, 17, 7};
        assertTrue(SequentialSearch.contains(a, 17));
        assertTrue(SequentialSearch.contains(a, 1));
        assertTrue(SequentialSearch.contains(a, 2));
        assertTrue(SequentialSearch.contains(a, 3));
        assertTrue(SequentialSearch.contains(a, 4));
        assertFalse(SequentialSearch.contains(a, 10));
    }

}

------------------------------

BINARY SEARCH
public class BinarySearch {
    public static boolean contains(int[] a, int b) {
        if (a.length == 0) {
            return false;
        }
        int low = 0;
        int high = a.length-1;

        while(low <= high ) {
            int middle = (low+high) /2;
            if (b> a[middle] ){
                low = middle +1;
            } else if (b< a[middle]){
                high = middle -1;
            } else { // The element has been found
                return true;
            }
        }
        return false;
    }
}

TEST
public class BinarySearchTest {

    @Test
    public void testContains() {
        int[]a = {1, 2, 3, 4, 5, 7, 17,  19 };
//      assertTrue(BinarySearch.contains(a, 17));
        assertTrue(BinarySearch.contains(a, 1));
        assertTrue(BinarySearch.contains(a, 2));
        assertTrue(BinarySearch.contains(a, 3));
        assertTrue(BinarySearch.contains(a, 4));
        assertFalse(BinarySearch.contains(a, 10));
    }

}
